package Libraries.Development.Environment.Studio.Behaviors
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Item
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Controls.TextBox
use Libraries.Language.Compile.CompilerResult
use Libraries.System.File
use Libraries.Language.Compile.Parsing.Token
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Game.Graphics.Color
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Interface.Controls.TextStyles.TextUnderline
use Libraries.Containers.Iterator
use Libraries.Language.Compile.CompilerError
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Debug.Breakpoint
use Libraries.Containers.Array
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Development.Environment.Studio.Build.BuildInformation
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.Hints.Hint
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Location
use Libraries.System.DateTime
use Libraries.Language.Compile.Hints.UseHint
use Libraries.Development.Versioning.DiffResult
use Libraries.Development.Environment.Studio.Interface.StatusLineGutter
use Libraries.Containers.HashTable
use Libraries.Development.Environment.Studio.Interface.BreakpointTextStyle
use Libraries.Language.Compile.Parsing.QuorumLexer
use Libraries.Language.Compile.Parsing.TokenIterator
use Libraries.Language.Compile.Parsing.QuorumLexerConstants
use Libraries.Development.Environment.Configuration.OptionsConstants
use Libraries.Game.GameStateManager
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Controls.Blocks.RootBlock
use Libraries.Interface.Controls.Blocks.Block
use Libraries.Interface.Controls.Support.GutterAnnotation
use Libraries.Development.Versioning.DiffEdit
use Libraries.Development.Versioning.GitConstants
use Libraries.Interface.Controls.AnnotationLineGutter

class UpdateCodeEditorBehavior is QuorumStudioBehavior
    File path
    Color blue
    Color green
    Color darkGreen
    Color orange
    Color grey
    Color purple
    //Color caretColor
    //Color breakpointColor

    Color keywordColor = undefined
    Color structureColor = undefined
    Color textColor = undefined
    Color commentColor = undefined

    Color fieldColor = undefined
    Color errorLineColor = undefined
    Color hintLineColor = undefined
    Color caretColor
    Color breakpointColor

    BuildManager manager = undefined
    text projectKey = ""
    text helpPathComparison = undefined
    CodeTextBox box = undefined
    CodeEditor editor = undefined
    DiffResult diffResult = undefined
    OptionsConstants optionsConstants
    GitConstants gitConstants

    /*
        
    */
    on create
        blue = blue:Blue()
        orange:SetColor(206.0/255, 123.0/255, 0, 1.0)
        green:SetColor(0/255, 255.0/255, 0/255, 1.0)
        darkGreen:SetColor(0/255, 153.0/255, 0/255, 1.0)
        grey:SetColor(152.0/255, 152.0/255, 152.0/255, 1.0)
        caretColor:SetColor(233.0/255.0, 239.0/255.0, 248.0/255.0, 1.0)
        breakpointColor:SetColor(252.0/255.0, 157.0/255.0, 159.0/255.0, 1.0)
        purple = blue:Purple()

        keywordColor = blue
        structureColor = purple
        textColor = orange
        commentColor = grey

        fieldColor = darkGreen
        errorLineColor = blue:Red()
        hintLineColor = green
    end

    action GetBuildManager returns BuildManager
        return manager
    end

    action SetBuildManager(BuildManager manager)
        me:manager = manager
    end

    action GetHintPathComparison returns text
        return helpPathComparison
    end

    action SetHintPathComparison(text value)
        me:helpPathComparison = value
    end

    action GetPath returns File
        return path
    end

    action SetPath(File path)
        me:path = path
    end

    action GenerateHintBucket(Iterator<Hint> iterator) returns HashTable<integer, Array<Hint>>
        if iterator = undefined return undefined end
        HashTable<integer, Array<Hint>> bucket
        repeat while iterator:HasNext()
            Hint hint = iterator:Next()
            integer line = hint:GetLineNumber() - 1

            if bucket:HasKey(line)
                Array<Hint> hints = bucket:GetValue(line)
                hints:Add(hint)
            else
                Array<Hint> hints
                hints:Add(hint)
                bucket:Set(line, hints)
            end
        end
        return bucket
    end

    action GenerateCompilerErrorBucket(Iterator<CompilerError> iterator) returns HashTable<integer, Array<CompilerError>>
        if iterator = undefined return undefined end
        HashTable<integer, Array<CompilerError>> bucket
        repeat while iterator:HasNext()
            CompilerError error = iterator:Next()
            integer line = error:GetLineNumber() - 1

            if bucket:HasKey(line)
                Array<CompilerError> errors = bucket:GetValue(line)
                errors:Add(error)
            else
                Array<CompilerError> errors
                errors:Add(error)
                bucket:Set(line, errors)
            end
        end
        return bucket
    end

    action Run(CodeEditor editor)
        if editor = undefined
            return now
        end
        
File file = editor:GetFile()
        boolean isStandardLibrary = false
        Library library = manager:GetLibrary()
        CompilerResult compilerResult = manager:GetRecentCompilerResult(projectKey)
        QuorumLexer lexer
        lexer:Read(editor:GetText())
      
        GameStateManager gms
        InterfaceOptions options = gms:GetInterfaceOptions()
        ColorGroup cgK = options:GetColorProperty(optionsConstants:EDITOR_KEYWORD_COLOR)
        ColorGroup cgS = options:GetColorProperty(optionsConstants:EDITOR_STRUCTURE_COLOR)
        ColorGroup cgT = options:GetColorProperty(optionsConstants:EDITOR_TEXT_COLOR)
        ColorGroup cgC = options:GetColorProperty(optionsConstants:EDITOR_COMMENT_COLOR)
        ColorGroup cgF = options:GetColorProperty(optionsConstants:EDITOR_FIELD_COLOR)
        ColorGroup cgEL = options:GetColorProperty(optionsConstants:EDITOR_ERROR_LINE_COLOR)
        ColorGroup cgHL = options:GetColorProperty(optionsConstants:EDITOR_HINT_LINE_COLOR)
        ColorGroup cgCC = options:GetColorProperty(optionsConstants:EDITOR_CARET_COLOR)
        ColorGroup cgBC = options:GetColorProperty(optionsConstants:EDITOR_BREAKPOINT_COLOR)
        
        if cgK not= undefined
            keywordColor = cast(Color, cgK)
        end

        if cgS not= undefined
            structureColor = cast(Color, cgS)
        end

        if cgT not= undefined
            textColor = cast(Color, cgT)
        end

        if cgC not= undefined
            commentColor = cast(Color, cgC)
        end

        if cgF not= undefined
            fieldColor = cast(Color, cgF)
        end

        if cgEL not= undefined
            errorLineColor = cast(Color, cgEL)
        end

        if cgHL not= undefined
            hintLineColor = cast(Color, cgHL)
        end

        if cgCC not= undefined
            caretColor = cast(Color, cgCC)
        end

        if cgBC not= undefined
            breakpointColor = cast(Color, cgBC)
        end
        
        //reset the lexer and go forward
        Array<Token> mainFileTokens
        mainFileTokens:SetMaxSize(500)
        editor:EmptyTextStyles()

        TokenIterator<Token> tokenIterator = lexer:GetIterator()
        tokenIterator:SetReadingAllChannels(true)
        
        Block searchBlock = editor:GetRootBlock()
        Block foundBlock = undefined

        i = 0
        repeat while tokenIterator:HasNext()
            Token token = tokenIterator:Next()
            if token:category not= -1
                if IsKeyword(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(keywordColor)
                    foundBlock = editor:AddTextStyle("Lexer" + i, style, searchBlock)
                    if foundBlock not= undefined
                        searchBlock = foundBlock
                    end
                elseif IsStructure(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(structureColor)
foundBlock = editor:AddTextStyle("Lexer" + i, style, searchBlock)
                    if foundBlock not= undefined
                        searchBlock = foundBlock
                    end
                elseif IsText(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(textColor)
foundBlock = editor:AddTextStyle("Lexer" + i, style, searchBlock)
                    if foundBlock not= undefined
                        searchBlock = foundBlock
                    end
                elseif IsComment(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(commentColor)
foundBlock = editor:AddTextStyle("Lexer" + i, style, searchBlock)
                    if foundBlock not= undefined
                        searchBlock = foundBlock
                    end
                end
                mainFileTokens:Add(token)
            else
                token = undefined
            end
            
            i = i + 1
        end

        SymbolTable table = undefined
        if isStandardLibrary
            table = library:GetSymbolTable()
        elseif compilerResult not= undefined
            table = compilerResult:symbolTable
        end

        searchBlock = editor:GetRootBlock()
        if table not= undefined
            Class clazzInFile = table:GetClassInFile(path:GetAbsolutePath())
            if clazzInFile not= undefined
                Iterator<Variable> variables = clazzInFile:GetVariables()
                repeat while variables not= undefined and variables:HasNext()
                    Variable var = variables:Next()
    
                    Iterator<Location> uses = var:GetUseLocationIterator(var:GetFile())
                    repeat while uses not= undefined and uses:HasNext()
                        Location location = uses:Next()
                        if location:GetFile():GetAbsolutePath() = path:GetAbsolutePath()
                            integer start = location:GetIndex()
                            integer finish = location:GetIndexEnd()
    
                            TextStyle style
                            style:SetIndex(start)
                            style:SetSize(finish - start + 1)
                            style:SetColor(fieldColor)
foundBlock = editor:AddTextStyle("Semantics" + i, style, searchBlock)
                    if foundBlock not= undefined
                        searchBlock = foundBlock
                    end
                            i = i + 1
                        end
                    end
    
                    integer start = var:GetIndex()
                    integer finish = var:GetIndexEnd()
    
                    TextStyle style
                    style:SetIndex(start)
                    style:SetSize(finish - start + 1)
                    style:SetColor(fieldColor)
foundBlock = editor:AddTextStyle("SemanticsName", style)
                end
            end
        end
        

        AnnotationLineGutter annotationGutter = editor:GetAnnotationLineGutter()
        HashTable<integer, GutterAnnotation> annotationHash = ConvertToAnnotation()
        annotationGutter:SetAnnotations(annotationHash)

        File f = path
        if table not= undefined
            Class clazz = table:GetClassInFile(f:GetAbsolutePath())

            if clazz = undefined
                ClassOpcode op = library:GetOpcode(f:GetAbsolutePath()) 
                if op not= undefined
                    clazz = op:GetClass()
                end
            end

            if clazz not= undefined
                editor:SetClass(clazz)
            end
        end

        
        if compilerResult not= undefined
            CompilerErrorManager errors = compilerResult:compilerErrorManager
            if errors = undefined
                return now
            end

            text pathToCompare = file:GetAbsolutePath()
            if helpPathComparison not= undefined
                pathToCompare = helpPathComparison
            end

            Iterator<Hint> hintIterator = errors:GetHintsAtKey(pathToCompare)
            Iterator<CompilerError> errorIterator = errors:GetErrorsAtKey(pathToCompare)

            HashTable<integer, Array<Hint>> hintBucket = GenerateHintBucket(hintIterator)
            HashTable<integer, Array<CompilerError>> errorBucket = GenerateCompilerErrorBucket(errorIterator)

            RootBlock root = editor:GetRootBlock()
            boolean done = false
            boolean hintsDone = false
            boolean errorsDone = false
            Block block = root
            if root not= undefined
                block = block:GetNextNavigableBlock() //skip the root
            end
            repeat while block not= undefined and not done
                integer blockStart = block:GetStartIndex()
                integer blockEnd = block:GetEndIndex()
                integer blockStartLine = block:GetStartLine()
                integer blockEndLine = block:GetEndLine()

                block:EmptyHints()
                block:EmptyErrors()
                
                if hintBucket not= undefined
                    Array<Hint> hintsAtLine = hintBucket:GetValue(blockStartLine)
                    i = 0
                    repeat while hintsAtLine not= undefined and i < hintsAtLine:GetSize()
                        Hint hint = hintsAtLine:Get(i)
                        block:Add(hint)
                        i = i + 1
                    end
                end

                if errorBucket not= undefined
                    Array<CompilerError> errorsAtLine = errorBucket:GetValue(blockStartLine)
                    i = 0
                    repeat while errorsAtLine not= undefined and i < errorsAtLine:GetSize()
                        CompilerError error = errorsAtLine:Get(i)
                        block:Add(error)
                        i = i + 1
                    end
                end

                Block next = block:GetNextNavigableBlock()
                if next = undefined or next = block
                    done = true
                else 
                    block = next
                end
            end
        end
    end
    
    Color color
    Color hintColor = color:CustomColor(246/255.0, 217/255.0, 87/255.0,1)
    Color gitModifiedColor = color:CustomColor(160/255.0, 200/255.0, 255/255.0,1)
    Color gitAddedColor = color:CustomColor(150/255.0, 255/255.0, 150/255.0,1)
    Color gitRemovedColor = color:CustomColor(255/255.0, 160/255.0, 180/255.0,1)

    private action ConvertToAnnotation returns HashTable<integer, GutterAnnotation>
        if diffResult = undefined
            return undefined
        end
        HashTable<integer, GutterAnnotation> table
        Array<DiffEdit> edits = diffResult:GetEdits()
        i = 0
        repeat while i < edits:GetSize()
            DiffEdit edit = edits:Get(i)
            integer type = edit:GetEditType()
            
            if type = gitConstants:EDIT_INSERT
                GutterAnnotation annotation
                annotation:SetColor(gitAddedColor)
                annotation:SetLine(i)
                annotation:SetName("Added Line")
                table:Add(i, annotation)
            elseif type = gitConstants:EDIT_CHANGE
                GutterAnnotation annotation
                annotation:SetColor(gitModifiedColor)
                annotation:SetLine(i)
annotation:SetName("Changed Line")
                table:Add(i, annotation)
            elseif type = gitConstants:EDIT_EQUAL and edit:HasDeletion()
                GutterAnnotation annotation
                annotation:SetColor(gitRemovedColor)
                annotation:SetLine(i)
annotation:SetName("Deleted Line")
                table:Add(i, annotation)
            end
            i = i + 1
        end

        return table
    end

    action Run(CodeTextBox box)
        if box = undefined
            return now
        end
        File file = box:GetFile()
        boolean isStandardLibrary = false
        Library library = manager:GetLibrary()
        CompilerResult compilerResult = manager:GetRecentCompilerResult(projectKey)
        QuorumLexer lexer
        lexer:Read(box:GetText())
        StatusLineGutter statusGutter = box:GetStatusGutter()
        statusGutter:SetDiffResult(diffResult)
      
        GameStateManager gms
        InterfaceOptions options = gms:GetInterfaceOptions()
        ColorGroup cgK = options:GetColorProperty(optionsConstants:EDITOR_KEYWORD_COLOR)
        ColorGroup cgS = options:GetColorProperty(optionsConstants:EDITOR_STRUCTURE_COLOR)
        ColorGroup cgT = options:GetColorProperty(optionsConstants:EDITOR_TEXT_COLOR)
        ColorGroup cgC = options:GetColorProperty(optionsConstants:EDITOR_COMMENT_COLOR)
        ColorGroup cgF = options:GetColorProperty(optionsConstants:EDITOR_FIELD_COLOR)
        ColorGroup cgEL = options:GetColorProperty(optionsConstants:EDITOR_ERROR_LINE_COLOR)
        ColorGroup cgHL = options:GetColorProperty(optionsConstants:EDITOR_HINT_LINE_COLOR)
        ColorGroup cgCC = options:GetColorProperty(optionsConstants:EDITOR_CARET_COLOR)
        ColorGroup cgBC = options:GetColorProperty(optionsConstants:EDITOR_BREAKPOINT_COLOR)
        
        if cgK not= undefined
            keywordColor = cast(Color, cgK)
        end

        if cgS not= undefined
            structureColor = cast(Color, cgS)
        end

        if cgT not= undefined
            textColor = cast(Color, cgT)
        end

        if cgC not= undefined
            commentColor = cast(Color, cgC)
        end

        if cgF not= undefined
            fieldColor = cast(Color, cgF)
        end

        if cgEL not= undefined
            errorLineColor = cast(Color, cgEL)
        end

        if cgHL not= undefined
            hintLineColor = cast(Color, cgHL)
        end

        if cgCC not= undefined
            caretColor = cast(Color, cgCC)
        end

        if cgBC not= undefined
            breakpointColor = cast(Color, cgBC)
        end
        
        //reset the lexer and go forward
        Array<Token> mainFileTokens
        mainFileTokens:SetMaxSize(500)
        constant text DEBUGGER_STYLE = "Debugger"
        TextStyle debuggerStyle = box:GetTextStyle(DEBUGGER_STYLE)
        box:EmptyTextStyles()

        TokenIterator<Token> tokenIterator = lexer:GetIterator()
        tokenIterator:SetReadingAllChannels(true)

        i = 0
        repeat while tokenIterator:HasNext()
            Token token = tokenIterator:Next()
            if token:category not= -1
                if IsKeyword(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(keywordColor)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsStructure(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(structureColor)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsText(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(textColor)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsComment(token)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(commentColor)
                    box:AddTextStyle("Lexer" + i, style)
                end
                mainFileTokens:Add(token)
            else
                token = undefined
            end
            
            i = i + 1
        end

        SymbolTable table = undefined
        if isStandardLibrary
            table = library:GetSymbolTable()
        elseif compilerResult not= undefined
            table = compilerResult:symbolTable
        end

        if table not= undefined
            Class clazzInFile = table:GetClassInFile(path:GetAbsolutePath())
            if clazzInFile not= undefined
                Iterator<Variable> variables = clazzInFile:GetVariables()
                repeat while variables not= undefined and variables:HasNext()
                    Variable var = variables:Next()
    
                    Iterator<Location> uses = var:GetUseLocationIterator(var:GetFile())
                    repeat while uses not= undefined and uses:HasNext()
                        Location location = uses:Next()
                        if location:GetFile():GetAbsolutePath() = path:GetAbsolutePath()
                            integer start = location:GetIndex()
                            integer finish = location:GetIndexEnd()
    
                            TextStyle style
                            style:SetIndex(start)
                            style:SetSize(finish - start + 1)
                            style:SetColor(fieldColor)
                            box:AddTextStyle("Semantics" + i, style)
                            i = i + 1
                        end
                    end
    
                    integer start = var:GetIndex()
                    integer finish = var:GetIndexEnd()
    
                    TextStyle style
                    style:SetIndex(start)
                    style:SetSize(finish - start + 1)
                    style:SetColor(fieldColor)
                    box:AddTextStyle("SemanticsName", style)
                end
            end
        end
        
        if not isStandardLibrary and compilerResult not= undefined
            CompilerErrorManager errors = compilerResult:compilerErrorManager
            box:SetCompilerErrorManager(errors)
            if errors = undefined
                return now
            end

            text pathToCompare = file:GetAbsolutePath()
            if helpPathComparison not= undefined
                pathToCompare = helpPathComparison
            end

            if not errors:IsCompilationErrorFree()
                i = 0
                Iterator<CompilerError> iterator = errors:GetIterator()
                repeat while iterator:HasNext()
                    CompilerError error = iterator:Next()

                    //first check if this is a multi-line error. 
                    //If it is, highlight the entire line, but no more.
                    if error:GetAbsolutePath() = pathToCompare
                        integer line = error:GetLineNumber()
                        integer lineEnd = error:GetLineNumberEnd()

                        integer index = error:GetIndex()
                        integer indexEnd = error:GetIndexEnd()

                        //change the index to just be the end of the line
                        if line not= lineEnd
                            text value = box:GetLine(line - 1)
                            indexEnd = index + value:GetSize()
                        end
                        TextStyle style
                        TextUnderline underline
                        underline:SetColor(errorLineColor)
                        underline:SetErrorFlag(true)
                        style:SetHighlight(underline)
                        style:SetIndex(index)
                        if indexEnd - index + 1 > 0
                            style:SetSize(indexEnd - index + 1)
                        else
                            style:SetSize(1)
                        end
                        box:AddTextStyle("Errors" + i, style)
                    end
                    i = i + 1
                end
            end

            HashTable<integer, Hint> hintLocations
            if errors:HasHints()
                Iterator<Hint> hinterator = errors:GetHintIterator()
                i = 0
                repeat while hinterator:HasNext()
                    Hint hint = hinterator:Next()
                    
                    text value = hint:GetAbsolutePath()
                    //Only put in the green line if it's a use statement hint
                    if file not= undefined and value = pathToCompare and hint is UseHint
                        integer index = hint:GetIndex()
                        integer indexEnd = hint:GetIndexEnd()
                        TextStyle style
                        TextUnderline underline
                        underline:SetColor(hintLineColor)
                        style:SetHighlight(underline)
                        style:SetIndex(index)
                        if indexEnd - index + 1 > 0
                            style:SetSize(indexEnd - index + 1)
                        else
                            style:SetSize(1)
                        end
                        hintLocations:Add(hint:GetLineNumber(), hint)
                        box:AddTextStyle("Hints" + i, style)
                    end
                    i = i + 1
                end
                statusGutter:SetHintLocations(hintLocations)
            end
        end

        //now set the cursor line
        integer caret = box:GetCaretPosition()
        ColoredHighlight caretHighlight
        caretHighlight:SetColor(caretColor)
        caretHighlight:SetLineHighlight(true)
        caretHighlight:SetRenderPriority(-1)
        TextStyle caretStyle
        caretStyle:SetIndex(caret)
        caretStyle:SetHighlight(caretHighlight)
        box:AddTextStyle("Caret", caretStyle)

        //add breakpoints
        manager:RehashBreakpoints(path:GetAbsolutePath())
        Iterator<Breakpoint> breakpoints = manager:GetBreakpointIterator(path:GetAbsolutePath())
        repeat while breakpoints:HasNext()
            Breakpoint bp = breakpoints:Next()
            integer line = bp:GetLine()
            ColoredHighlight breakpointHighlight
            breakpointHighlight:SetColor(breakpointColor)
            breakpointHighlight:SetLineHighlight(true)
            breakpointHighlight:SetRenderPriority(1)
            BreakpointTextStyle breakpointStyle
            integer index = box:GetIndexOfLine(line)
            breakpointStyle:SetIndex(index)
            breakpointStyle:SetHighlight(breakpointHighlight)
            breakpointStyle:SetBreakpoint(bp)
            breakpointStyle:SetBox(box)
            breakpointStyle:SetBreakpoint(bp)
            breakpointStyle:SetLine(line)
            box:AddTextStyle("Breakpoint" + box:IncrementBreakpoint(), breakpointStyle)
        end

        //add the debugger line
        if debuggerStyle not= undefined
            box:AddTextStyle(DEBUGGER_STYLE, debuggerStyle)
        end

        File f = path

        if table not= undefined
            Class clazz = table:GetClassInFile(f:GetAbsolutePath())

            if clazz = undefined
                ClassOpcode op = library:GetOpcode(f:GetAbsolutePath()) 
                if op not= undefined
                    clazz = op:GetClass()
                end
            end

            if clazz not= undefined
                box:SetClass(clazz)
                box:SetStaticKey(clazz:GetStaticKey())
                box:SetLexer(mainFileTokens)
            end
        end

        box:RestoreFindReplaceStyles()
    end

    action Run(BehaviorEvent event)
        Item item = event:GetItem()
        if item not= undefined and item is CodeTextBox
            box = cast(CodeTextBox, event:GetItem())
        elseif item not= undefined and item is CodeEditor
            editor = cast(CodeEditor, event:GetItem())
        end
    end

    private action GetTextStyle(Token token) returns TextStyle
        TextStyle style
        style:SetIndex(token:startIndex)
        style:SetSize(token:endIndex - token:startIndex + 1)
        return style
    end

    private action IsStructure(Token token) returns boolean
        QuorumLexerConstants lexer
        if  token:category = lexer:OUTPUT 
            or token:category = lexer:ON
            or token:category = lexer:CREATE
            or token:category = lexer:BLUEPRINT
            or token:category = lexer:NATIVE
            or token:category = lexer:ACTION
            or token:category = lexer:CLASS
            or token:category = lexer:END
            or token:category = lexer:IF
            or token:category = lexer:REPEAT
            or token:category = lexer:ELSE
            or token:category = lexer:ELSE_IF
            return true
        end

        return false
    end

    private action IsText(Token token) returns boolean
        QuorumLexerConstants lexer
        if  token:category = lexer:STRING 
            return true
        end
        return false
    end

    private action IsComment(Token token) returns boolean
        QuorumLexerConstants lexer
        if  token:category = lexer:COMMENTS 
            return true
        end
        return false
    end

    private action IsKeyword(Token token) returns boolean
        QuorumLexerConstants lexer
        if  token:category = lexer:OUTPUT 
            or token:category = lexer:CONSTANT
            or token:category = lexer:ME
            or token:category = lexer:UNTIL
            or token:category = lexer:PUBLIC
            or token:category = lexer:PRIVATE
            or token:category = lexer:ALERT
            or token:category = lexer:DETECT
            or token:category = lexer:ALWAYS
            or token:category = lexer:CHECK
            or token:category = lexer:PARENT
            or token:category = lexer:CAST
            or token:category = lexer:STATIC
            or token:category = lexer:INPUT
            or token:category = lexer:SAY
            or token:category = lexer:NOW
            or token:category = lexer:WHILE
            or token:category = lexer:PACKAGE_NAME
            or token:category = lexer:TIMES
            or token:category = lexer:RETURNS
            or token:category = lexer:RETURN
            or token:category = lexer:AND
            or token:category = lexer:OR
            or token:category = lexer:NULL
            or token:category = lexer:INTEGER_KEYWORD
            or token:category = lexer:NUMBER_KEYWORD
            or token:category = lexer:TEXT
            or token:category = lexer:BOOLEAN_KEYWORD
            or token:category = lexer:USE
            or token:category = lexer:NOT
            or token:category = lexer:NOT_EQUALS
            or token:category = lexer:MODULO
            or token:category = lexer:BOOLEAN
            or token:category = lexer:INHERITS
            return true
        end

        return false
    end

    boolean firstTime = true
    action Update(number seconds)
        if firstTime
            if box not= undefined
                Run(box)
            elseif editor not= undefined
                Run(editor)
            end
            firstTime = false
        end
    end

    action IsFinished returns boolean
        return not firstTime
    end

    action GetProjectKey returns text
        return projectKey
    end

    action SetProjectKey(text projectKey)
        me:projectKey = projectKey
    end
    action GetDiffResult returns DiffResult
        return diffResult
    end

    action SetDiffResult(DiffResult diffResult)
        me:diffResult = diffResult
    end
end