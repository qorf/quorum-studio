package Libraries.Development.Environment.Studio
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Containers.Array
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Layouts.Layout
use Libraries.System.File
use Libraries.Game.Graphics.Texture
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.InputOutputError
use Libraries.Game.Graphics.Color
use Libraries.Containers.HashTable
use Libraries.Development.Environment.Resources
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.TextureWrap
use Libraries.Game.Graphics.TextureRegion
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Behaviors.Controls.TabPaneForwardTabBehavior
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Events.TabChangeListener
use Libraries.Interface.Events.TabChangeEvent
use Libraries.Interface.Controls.Icon
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.Interface.VisualEditorTab
use Libraries.Development.Environment.Studio.Interface.SpreadsheetTab
use Libraries.Interface.Controls.Spreadsheet
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Development.Environment.Configuration.OptionsConstants
use Libraries.Development.Environment.Configuration.Options
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Language.Compile.Blocks.ParserToBlockListener
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.Parsing.QuorumLexer
use Libraries.Language.Compile.Parsing.QuorumParser
use Libraries.Language.Compile.Context.StartContext
use Libraries.Interface.Behaviors.Controls.CodeEditorFocusChangedListener

class CodeEditorTabPane is TabPane, TabChangeListener
    KeyboardEvent keys
    Color color
    HashTable<text, File> openFiles
    HashTable<text, Tab> openTabs
    Resources resources = undefined
    KeyMap keyMap = undefined
    Behaviors behaviors = undefined
    File queuedFileOpen = undefined
    integer queuedLine = 0
    boolean firstTimeBlockEditorOpened = true
    CodeEditorFocusChangedListener codeEditorFocusChanged

    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FILL)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        properties:SetPercentageHeight(0.7)
        properties:SetLeftMargin(3)
        properties:SetRightMargin(3)

        SetName("Code Tabs")
        AddTabChangeListener(me)
    end

    action ClosedTab(TabChangeEvent event)
        if event:GetTab() is EditorTab
            EditorTab tab = cast(EditorTab, event:GetTab())
            File file = tab:GetFile()
            if file not= undefined
                text path = file:GetAbsolutePath()
                openFiles:RemoveKey(path)
                openTabs:RemoveKey(path)
            end
        elseif event:GetTab() is VisualEditorTab
            VisualEditorTab tab = cast(VisualEditorTab, event:GetTab())
            File file = tab:GetFile()
            if file not= undefined
                text path = file:GetAbsolutePath()
                openFiles:RemoveKey(path)
                openTabs:RemoveKey(path)
            end
        elseif event:GetTab() is SpreadsheetTab
            SpreadsheetTab tab = cast(SpreadsheetTab, event:GetTab())
            File file = tab:GetFile()
            if file not= undefined
                text path = file:GetAbsolutePath()
                openFiles:RemoveKey(path)
                openTabs:RemoveKey(path)
            end
        end
    end

    action GainedFocus(FocusEvent event)
        TabPaneSelection selection = GetSelection()
        Tab tab = selection:GetTab()
        if tab not= undefined and tab is EditorTab
            EditorTab t = cast(EditorTab, tab)
            TextBox box = t:GetTextBox()
            if box not= undefined
                box:Focus()
            end
        end
    end

    /*Check if a specific file is open*/
    action IsOpen(File file) returns boolean
        if openFiles:HasKey(file:GetAbsolutePath())
            return true
        end
        return false
    end

    action GetOpenTab(File file) returns Tab
        if openTabs:HasKey(file:GetAbsolutePath())
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            return tab
        end
        return undefined
    end

    action CloseFile(File file)
        if IsOpen(file)
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            Remove(tab)
        end
    end
    
    action GetOpenFiles returns Iterator<File> 
        return openFiles:GetValueIterator()
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
        me:keyMap = resources:GetKeyMap()
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
    end

    action GetOpenFileIterator returns Iterator<File>
        return openFiles:GetValueIterator()
    end

    action GetOpenTabIterator returns Iterator<Tab> 
        return openTabs:GetValueIterator()
    end

    action UpdateEditorBadging
        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)

        Iterator<Tab> tabs = openTabs:GetValueIterator()
        repeat while tabs:HasNext()
            Tab tab = tabs:Next()
            if tab is EditorTab
                EditorTab edit = cast(EditorTab, tab)
                File value = edit:GetFile()

                boolean isMain = false
                ProjectManager projects = studio:GetProjectManager()
                Iterator<QuorumProject> iterator = projects:GetIterator()
                repeat while iterator:HasNext()
                    QuorumProject project = iterator:Next()
                    if project:IsMainFile(value)
                        isMain = true
                    end
                end

                Icon icon = undefined
                if isMain
                    icon = resources:GetMainFile()
                else
                    icon = resources:GetQuorumFile()
                end 

                tab:SetIcon(icon)
            end
        end
    end

    private action OpenQuorumFileTab(File file) returns EditorTab
        EditorTab returnedTab = undefined

        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)
        if not studio:IsSupportedFile(file)
            return returnedTab
        end

        boolean value = openFiles:HasKey(file:GetAbsolutePath())
        if value //it's already open
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            //now we have to give that tab the focus
            tab:Activate()
            returnedTab = cast(EditorTab, tab)
            return returnedTab
        end
        text contents = ""

        check
            contents = file:Read()
        detect error is FileNotFoundError
            // File wasn't found, handle the error gracefully.
            // Output is for testing purposes only.
            output "Couldn't find file: " + file:GetAbsolutePath()
            return undefined
        detect error is InputOutputError
            // File couldn't be read for some reason.
            // Output is for testing purposes only.
            output "Couldn't read file: " + file:GetAbsolutePath()
            error:OutputStackTrace()
            return undefined
        end

        
        if studio:GetOptions():IsBlockMode()
            check
                return OpenInBlockMode(contents, file)
            detect error
                error:OutputStackTrace()
                return OpenInTextMode(contents, file)
            end
            return undefined
        else
            return OpenInTextMode(contents, file)
        end
    end

    private action OpenInBlockMode(text contents, File file) returns EditorTab
        EditorTab returnedTab = undefined

        GameStateManager gameManager
        Game game = gameManager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)

        
        CodeEditor editor = undefined
        ParserToBlockListener listener
        CodeEditor editor2
        editor = editor2
        editor:SetBlockListener(listener)
        editor:AddFocusListener(codeEditorFocusChanged)
        

        integer size = 15
        editor:SetPercentageWidth(1)
        editor:SetPercentageHeight(1)
        editor:SetFontSize(size)
        editor:SetBlockNotchTopWidth(40)
        editor:SetBlockNotchBottomWidth(20)
        editor:SetBlockNotchPercentageHeight(5)
        InputTable table = game:GetInputTable(editor:CODE_EDITOR_INPUT_GROUP)
        if firstTimeBlockEditorOpened //can't be undefined, because it's in the standard library now
            //table = editor:CopyAndActivateInputTable(editor:CODE_EDITOR_INPUT_GROUP)
            editor:SetInputGroup(editor:CODE_EDITOR_INPUT_GROUP)

            table:Add(keyMap:GetCodeCompletionKey(), behaviors:GetCodeCompletionBehavior())
//            table:Add(keyMap:GetCommentLinesKey(), behaviors:GetCommentLinesBehavior())
//            table:Add(keyMap:GetEditorHintKey(), behaviors:GetEditorHintBehavior())
//            table:Add(keyMap:GetSmartNavigateUpKey(), behaviors:GetEditorSmartNavigationUp())
//            table:Add(keyMap:GetSmartNavigateDownKey(), behaviors:GetEditorSmartNavigationDown())
//            table:Add(keyMap:GetSmartNavigateLeftKey(), behaviors:GetEditorSmartNavigationLeft())
//            table:Add(keyMap:GetSmartNavigateRightKey(), behaviors:GetEditorSmartNavigationRight())
//            table:Add(keyMap:GetSelectSmartNavigateUpKey(), behaviors:GetEditorSelectSmartNavigationUp())
//            table:Add(keyMap:GetSelectSmartNavigateDownKey(), behaviors:GetEditorSelectSmartNavigationDown())
//            table:Add(keyMap:GetNextKey(), behaviors:GetNextBehavior())
//            table:Add(keyMap:GetPreviousKey(), behaviors:GetPreviousBehavior())
//            table:Add(keyMap:GetUndoKey(), behaviors:GetUndoBehavior())
//            table:Add(keyMap:GetRedoKey(), behaviors:GetRedoBehavior())

            // Extra behaviors and InputSets used to trap incoming periods and
            // colons for use with code completion.

            InputSet periodSet
            InputSet colonSet
            InputSet shiftSemicolonSet

            periodSet:SetKeyboardInput(keys:PERIOD)
            colonSet:SetKeyboardInput(keys:COLON)
            shiftSemicolonSet:SetKeyboardInput(keys:SEMICOLON)
            shiftSemicolonSet:AddModifier(shiftSemicolonSet:SHIFT)

            table:Add(periodSet, behaviors:GetCodeCompletionBehavior())
            table:Add(colonSet, behaviors:GetCodeCompletionBehavior())
            table:Add(shiftSemicolonSet, behaviors:GetCodeCompletionBehavior())
            firstTimeBlockEditorOpened = false
        else 
            editor:SetInputGroup(editor:CODE_EDITOR_INPUT_GROUP)
        end




        text theCode = contents
        CompilerErrorManager errorManager
        QuorumLexer lexer
        lexer:SetCompilerErrorManager(errorManager)
        lexer:Read(theCode)
        
        if not errorManager:IsCompilationErrorFree()
            text value = errorManager:GetCompilerErrorsAsText()
            return undefined
        end
        QuorumParser parser
        parser:SetCompilerErrorManager(errorManager)
        parser:SetLexer(lexer)
        StartContext start = parser:Start()

        listener:SetStartContext(start)
        editor:SetName("Block Editor")
        editor:SetCode(theCode)


        boolean isMain = false

        ProjectManager projects = studio:GetProjectManager()
        Iterator<QuorumProject> iterator = projects:GetIterator()
        repeat while iterator:HasNext()
            QuorumProject project = iterator:Next()
            if project:IsMainFile(file)
                isMain = true
            end
        end
        Icon icon = undefined
        GameStateManager gsm
        OptionsConstants optionsConstants
        InterfaceOptions io = gsm:GetInterfaceOptions()
        if isMain
            text logo = io:GetCustomProperty(optionsConstants:QUORUM_MAIN_FILE_ICON)
            Texture texture = resources:GetTexture(logo)
            Icon icon2
            icon2:Load(texture)
            icon = icon2
        else
            text logo = io:GetCustomProperty(optionsConstants:QUORUM_FILE_ICON)
            Texture texture = resources:GetTexture(logo)
            Icon icon2
            icon2:Load(texture)
            icon = icon2
        end
        EditorTab tab
        tab:SetName(file:GetPath())
        tab:SetRelatedItem(editor)
        tab:SetIcon(icon)
        tab:DisplayCloseButton(true)
        tab:SetFile(file)
        number scale = GetInterfaceScale()
        tab:SetInterfaceScale(scale)
        tab:Setup()
        openFiles:Add(file:GetAbsolutePath(), file)
        openTabs:Add(file:GetAbsolutePath(), tab)
        Add(cast(Tab,tab))
        returnedTab = tab
        Resize()
        return returnedTab
    end

    private action OpenInTextMode(text contents, File file) returns EditorTab
        EditorTab returnedTab = undefined

        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)

        CodeTextBox textBox
        LayoutProperties boxProperties = textBox:GetDefaultLayoutProperties()
        boxProperties:SetPercentageWidth(1)
        boxProperties:SetPercentageHeight(1)
        boxProperties:SetPercentageX(0)
        boxProperties:SetPercentageY(0)
        boxProperties:SetHorizontalLayoutMode(boxProperties:STANDARD)
        boxProperties:SetVerticalLayoutMode(boxProperties:STANDARD)
        //textBox:SetBackgroundColor(color:White())
        textBox:SetText(contents)
        textBox:SetName("Code Edit Text Box")

        InputTable table = game:GetInputTable(textBox:CODE_BOX_INPUT_GROUP)
        if table = undefined
            table = textBox:CopyAndActivateInputTable(textBox:CODE_BOX_INPUT_GROUP)
            textBox:SetInputGroup(textBox:CODE_BOX_INPUT_GROUP)

            table:Add(keyMap:GetCodeCompletionKey(), behaviors:GetCodeCompletionBehavior())
            table:Add(keyMap:GetCommentLinesKey(), behaviors:GetCommentLinesBehavior())
            table:Add(keyMap:GetEditorHintKey(), behaviors:GetEditorHintBehavior())
            table:Add(keyMap:GetSmartNavigateUpKey(), behaviors:GetEditorSmartNavigationUp())
            table:Add(keyMap:GetSmartNavigateDownKey(), behaviors:GetEditorSmartNavigationDown())
            table:Add(keyMap:GetSmartNavigateLeftKey(), behaviors:GetEditorSmartNavigationLeft())
            table:Add(keyMap:GetSmartNavigateRightKey(), behaviors:GetEditorSmartNavigationRight())
            table:Add(keyMap:GetSelectSmartNavigateUpKey(), behaviors:GetEditorSelectSmartNavigationUp())
            table:Add(keyMap:GetSelectSmartNavigateDownKey(), behaviors:GetEditorSelectSmartNavigationDown())
            table:Add(keyMap:GetNextKey(), behaviors:GetNextBehavior())
            table:Add(keyMap:GetPreviousKey(), behaviors:GetPreviousBehavior())
            table:Add(keyMap:GetUndoKey(), behaviors:GetUndoBehavior())
            table:Add(keyMap:GetRedoKey(), behaviors:GetRedoBehavior())

            // Extra behaviors and InputSets used to trap incoming periods and
            // colons for use with code completion.

            InputSet periodSet
            InputSet colonSet
            InputSet shiftSemicolonSet

            periodSet:SetKeyboardInput(keys:PERIOD)
            colonSet:SetKeyboardInput(keys:COLON)
            shiftSemicolonSet:SetKeyboardInput(keys:SEMICOLON)
            shiftSemicolonSet:AddModifier(shiftSemicolonSet:SHIFT)

            table:Add(periodSet, behaviors:GetCodeCompletionBehavior())
            table:Add(colonSet, behaviors:GetCodeCompletionBehavior())
            table:Add(shiftSemicolonSet, behaviors:GetCodeCompletionBehavior())
        else 
            textBox:SetInputGroup(textBox:CODE_BOX_INPUT_GROUP)
        end
        
        boolean isMain = false
        ProjectManager projects = studio:GetProjectManager()
        Iterator<QuorumProject> iterator = projects:GetIterator()
        repeat while iterator:HasNext()
            QuorumProject project = iterator:Next()
            if project:IsMainFile(file)
                isMain = true
            end
        end
        Icon icon = undefined
        GameStateManager gsm
        OptionsConstants optionsConstants
        InterfaceOptions io = gsm:GetInterfaceOptions()
        if isMain
            text logo = io:GetCustomProperty(optionsConstants:QUORUM_MAIN_FILE_ICON)
            Texture texture = resources:GetTexture(logo)
            Icon icon2
            icon2:Load(texture)
            icon = icon2
        else
            text logo = io:GetCustomProperty(optionsConstants:QUORUM_FILE_ICON)
            Texture texture = resources:GetTexture(logo)
            Icon icon2
            icon2:Load(texture)
            icon = icon2
        end 
        EditorTab tab
        tab:SetName(file:GetPath())
        tab:SetRelatedItem(textBox)
        tab:SetIcon(icon)
        tab:DisplayCloseButton(true)
        tab:SetFile(file)
        number scale = GetInterfaceScale()
        tab:SetInterfaceScale(scale)
        tab:Setup()
        openFiles:Add(file:GetAbsolutePath(), file)
        openTabs:Add(file:GetAbsolutePath(), tab)
        Add(cast(Tab,tab))
        returnedTab = tab
        Resize()
        return returnedTab
    end

    private action OpenQuorumSceneTab(File file) returns VisualEditorTab
        boolean value = openFiles:HasKey(file:GetAbsolutePath())
        if value //it's already open
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            //now we have to give that tab the focus
            tab:Activate()
            return cast(VisualEditorTab, tab)
        end

        VisualEditorTab tab
        tab:SetFile(file)

        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)
        ProjectManager projects = studio:GetProjectManager()
        Iterator<QuorumProject> iterator = projects:GetIterator()
        repeat while iterator not= undefined and iterator:HasNext()
            QuorumProject project = iterator:Next()
            if project:IsScene(file)
                //This scene file is in a project's location somewhere.
                tab:SetProjectLocation(project:GetLocation())
            end
        end

        tab:Load()

        tab:SetName(file:GetPath())
        tab:SetIcon(resources:GetQuorumFile())
        tab:DisplayCloseButton(true)
        number scale = GetInterfaceScale()
        tab:SetInterfaceScale(scale)
        Add(cast(Tab,tab))
        Resize()

        openFiles:Add(file:GetAbsolutePath(), file)
        openTabs:Add(file:GetAbsolutePath(), tab)

        return tab
    end

    private action OpenQuorumSpreadsheetTab(File file) returns SpreadsheetTab
        boolean value = openFiles:HasKey(file:GetAbsolutePath())
        if value //it's already open
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            //now we have to give that tab the focus
            tab:Activate()
            return cast(SpreadsheetTab, tab)
        end

        SpreadsheetTab tab
        tab:SetFile(file)
        tab:SetName(file:GetPath())


        //We may need to lazy load or popup a message to the user for big files
        //for now, load anything they throw at us
        tab:Load()

        Spreadsheet sheet
        tab:SetRelatedItem(sheet)
        tab:Setup()
        


//
//        GameStateManager manager
//        Game game = manager:GetGame()
//        QuorumStudio studio = cast(QuorumStudio, game)
//        ProjectManager projects = studio:GetProjectManager()
//        Iterator<QuorumProject> iterator = projects:GetIterator()
//        repeat while iterator not= undefined and iterator:HasNext()
//            QuorumProject project = iterator:Next()
//            if project:IsScene(file)
//                //This scene file is in a project's location somewhere.
//                tab:SetProjectLocation(project:GetLocation())
//            end
//        end
//
//        tab:Load()
//
//        tab:SetName(file:GetPath())
        tab:SetIcon(resources:GetQuorumFile())
        tab:DisplayCloseButton(true)
        number scale = GetInterfaceScale()
        tab:SetInterfaceScale(scale)
        Add(cast(Tab,tab))
        //Resize()

        openFiles:Add(file:GetAbsolutePath(), file)
        openTabs:Add(file:GetAbsolutePath(), tab)

        return tab
    end

    /*
        This action opens a new tab if one is not open. If one is already open, 
        then it returns the one already there.
    */
    action OpenNewTab(File file) returns Tab
        EditorTab returnedTab = undefined

        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)
        if file = undefined or not studio:IsSupportedFile(file)
            return returnedTab
        end

        text extension = file:GetFileExtension()
        if extension = "quorum"
            return OpenQuorumFileTab(file)
        elseif extension = "qs"
            return OpenQuorumSceneTab(file)
        elseif extension = "csv"
            return OpenQuorumSpreadsheetTab(file)
        end

        return undefined
    end

    /*
    
    */
    action QueueTabOpen(File file, integer line)
        queuedFileOpen = file
        queuedLine = line
    end

    action Update(number seconds)
        if queuedFileOpen not= undefined
            Tab tab1 = OpenNewTab(queuedFileOpen)
            if tab1 is EditorTab
                EditorTab tab = cast(EditorTab, tab1)
                TextBox box = tab:GetTextBox()
                if box not= undefined
                    box:SetCaretPositionToLine(queuedLine)
                    box:GoToLine(queuedLine)
                    box:Focus()
                end
                queuedFileOpen = undefined
            end
        end
    end

    action GetDirtyTabsCount returns integer
        integer dirtyTabs = 0
        Iterator<File> iterator = GetOpenFileIterator()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            if tab is EditorTab
                EditorTab et = cast(EditorTab, tab)
                if et:IsDirty()
                    dirtyTabs = dirtyTabs + 1
                end
            end
        end
        return dirtyTabs
    end

    action SaveDirtyTabs
        Iterator<File> iterator = GetOpenFileIterator()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            if tab is EditorTab
                EditorTab et = cast(EditorTab, tab)
                if et:IsDirty()
                    et:Save()
                end
            elseif tab is VisualEditorTab
                VisualEditorTab visualTab = cast(VisualEditorTab, tab)
                // TO-DO: Determine if the tab is dirty and only change it if it is.
                visualTab:Save()
            end
        end
    end
end