package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Game.Graphics.Label
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.ProgressBar
use Libraries.Language.Compile.Library

use Libraries.Language.Compile.CompilerListener
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Random
use Libraries.Interface.Accessibility
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Layouts.ManualLayout

class SplashScreen is Dialog, CompilerListener
    boolean initialized = false
    Icon logo
    Label studio
    Label loading
    ProgressBar progress
    Library library = undefined
    number currentPercent = 0
    GameStateManager manager
    Math math
    Random random
    Array<text> scanLabels
    Array<text> parsingLabels
    Array<text> typeCheckingLabels
    Array<text> semanticsLabels
    Array<text> doneLabels
    boolean playMessage = false
    text notification = ""

    on create
        SetModal(true)
        SetTopBarVisible(false)

        scanLabels:Add("Taking the Upside Down to Prom")
        scanLabels:Add("Inviting the robots for totally good purposes, I promise")
        scanLabels:Add("Crowdsourcing loading messages")
        scanLabels:Add("Adding bugs to your programs")
        scanLabels:Add("Rolling Initiative")

        parsingLabels:Add("Trolling Internet Trolls")
        parsingLabels:Add("I guess I'm like ... booting?")
parsingLabels:Add("Spacebar heating reenabled")
        parsingLabels:Add("Generating Free Tacos")
        parsingLabels:Add("Tears of the Kingdom on Switch 2? Yes, please.")

        typeCheckingLabels:Add("Watching Rabbits do Standup")
        typeCheckingLabels:Add("Contemplating Rabbits")
        typeCheckingLabels:Add("Lowering human defenses")
        typeCheckingLabels:Add("Starting robot apocalypse")
        typeCheckingLabels:Add("Deleting your operating system ... with love?")

        semanticsLabels:Add("Blockifying Garden Gnomes")
        semanticsLabels:Add("Social distancing from Cthulu")
        semanticsLabels:Add("Suddenly ... kitties")
        semanticsLabels:Add("Feeling Spiky, Punk?")
        semanticsLabels:Add("Hugging adorable creatures")

        doneLabels:Add("Ironing Baby Yoda")
        doneLabels:Add("Returning that shirt you didn't like")
        doneLabels:Add("Shaving Chewbacca")
        doneLabels:Add("Hiding in the corner. Eating all your breakfast.")
        doneLabels:Add("INTENSIFYING TYPOES")
    progress:SetCornerRounding(0.1, 0.1, 0.1, 0.1)
end

    action UpdatePercentageComplete(number percent)
        currentPercent = percent
    end

    action FindRandomPhrase(Array<text> phrases) returns text
        text result = ""
        if phrases not= undefined and not phrases:IsEmpty()
            integer i = random:RandomIntegerBetween(0, phrases:GetSize() - 1)
            result = phrases:Get(i)
        end
        return result
    end

    action UpdateLabel(text label)
        if label = "Started Scanning"
            notification = FindRandomPhrase(scanLabels)
        elseif label = "Parsing"
            notification = FindRandomPhrase(parsingLabels)
        elseif label = "Type Checking"
            notification = FindRandomPhrase(typeCheckingLabels)
        elseif label = "Semantic Analysis"
            notification = FindRandomPhrase(semanticsLabels)
        elseif label = "All done!"
            notification = FindRandomPhrase(doneLabels)
        end
        playMessage = true
    end

    action Initialize
        if initialized
            output "WARNING: Re-initializing the FindDialog."
        end

        initialized = true

        QuorumStudio qs = cast(QuorumStudio, manager:GetGame())
        SetName("Loading")
        SetPercentageWidth(0.40)
        
        logo:Load("Resources/Graphics/Interface/SplashLogo.png")

        LayoutProperties properties
        Control panel
        FlowLayout panelLayout
        panel:SetLayout(panelLayout)
        panel:SetInterfaceOptionsKey("Dialog")
        panel:SetPercentageWidth(1.0)
        panel:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        panel:SetBorderStyle(properties:ALL)
        panel:SetBorderThickness(1)

        // Make a region to contain the logo. It'll use a ManualLayout so we can center the logo within it.
        Control logoRegion
        logoRegion:SetPercentageWidth(0.25)
        logoRegion:SetPercentageHeight(1.0)
        logoRegion:SetVerticalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        ManualLayout logoLayout
        logoRegion:SetLayout(logoLayout)
        panel:Add(logoRegion)

        logo:SetPercentageWidth(0.75)
        logo:SetPercentageHeight(0.75)
        logo:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        LayoutProperties logoProperties = logo:GetDefaultLayoutProperties()

        // Position the logo from its center (set origin), and put the origin at the center of the region
        logoProperties:SetPercentageOriginX(0.5)
        logoProperties:SetPercentageOriginY(0.5)
        logo:SetPercentageX(0.5)
        logo:SetPercentageY(0.5)
        logoRegion:Add(logo)

        Control textRegion
        ManualLayout regionLayout
        textRegion:SetLayout(regionLayout)
        textRegion:SetPercentageWidth(0.75)
        textRegion:SetPercentageHeight(logoRegion:GetPercentageHeight() / 3.0)
        textRegion:SetVerticalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        panel:Add(textRegion)

        studio:SetText(qs:GetDisplayName())
        studio:SetFontSize(20)
        LayoutProperties studioProperties = studio:GetDefaultLayoutProperties()
        studioProperties:SetPercentageOriginX(0.5)
        studioProperties:SetPercentageOriginY(1.0)
        studio:SetPercentageX(0.5)
        studio:SetPercentageY(0.95)
        textRegion:Add(studio)
        
        loading:SetText("Loading ...")
        LayoutProperties loadingProperties = loading:GetDefaultLayoutProperties()
        loadingProperties:SetPercentageOriginX(0.5)
        loadingProperties:SetPercentageOriginY(0.5)
        loading:SetPercentageX(0.5)
        loading:SetPercentageY(0.5)
        textRegion:Add(loading)        

        progress:SetPercentageWidth(0.9)
        progress:SetPercentageX(0.05)
        progress:SetPercentageHeight(0.15)
        progress:SetPercentageY(0.1)
        progress:SetBorderThickness(1)
        progress:SetPixelHeight(0)
        textRegion:Add(progress)

        ControlShaderView view
        view:Initialize()
        panel:SetView2D(view)

        Add(panel)
        progress:SetFocusable(true)
        
    end

    action OnShow
        progress:Focus()
    end

    action Update(number seconds)
        number value = math:RoundToNearestInteger(currentPercent)
        progress:SetValue(value)

        if playMessage
            Accessibility access = manager:GetAccessibility()
            if access not= undefined
                access:Notify(manager:GetFocus(), notification)
            end
            loading:SetText(notification)
            playMessage = false
        end
    end

    action GetLibrary returns Library
        return library
    end

    action SetLibrary(Library library)
        me:library = library
        library:AddListener(me)
    end
end
